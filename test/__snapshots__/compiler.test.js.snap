// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compiler on compile commonjs module type 1`] = `
"let mount = function (domRoot, st) {
  const _updaters = [];
  return st => {
    _updaters.forEach(u => u.update(st));
  };
};
module.exports = mount;"
`;

exports[`compiler on compile default module type generates es6 export 1`] = `
"let mount = function (domRoot, st) {
  const _updaters = [];
  return st => {
    _updaters.forEach(u => u.update(st));
  };
};
export default mount;"
`;

exports[`compiler on compile empty source 1`] = `
"let mount = function (domRoot, st) {
  const _updaters = [];
  return st => {
    _updaters.forEach(u => u.update(st));
  };
};
export default mount;"
`;

exports[`compiler on compile multiple tag nodes 1`] = `
"let mount = function (domRoot, st) {
  const _updaters = [];
  console.log('COMPILED_TAG_NODE');
  console.log('COMPILED_TAG_NODE');
  return st => {
    _updaters.forEach(u => u.update(st));
  };
};
export default mount;"
`;

exports[`compiler on compile nested nodes 1`] = `
"let mount = function (domRoot, st) {
  const _updaters = [];
  console.log('COMPILED_TEXT_NODE');
  console.log('COMPILED_TAG_NODE');
  console.log('COMPILED_TEXT_NODE');
  return st => {
    _updaters.forEach(u => u.update(st));
  };
};
export default mount;"
`;

exports[`compiler on compile simple closure export 1`] = `
"(() => {
  let mount = function (domRoot, st) {
    const _updaters = [];
    return st => {
      _updaters.forEach(u => u.update(st));
    };
  };
  return mount;
})();"
`;

exports[`compiler on compile single tag node 1`] = `
"let mount = function (domRoot, st) {
  const _updaters = [];
  console.log('COMPILED_TAG_NODE');
  return st => {
    _updaters.forEach(u => u.update(st));
  };
};
export default mount;"
`;

exports[`compiler on compile tag and text nodes 1`] = `
"let mount = function (domRoot, st) {
  const _updaters = [];
  console.log('COMPILED_TEXT_NODE');
  console.log('COMPILED_TAG_NODE');
  console.log('COMPILED_TEXT_NODE');
  console.log('COMPILED_TAG_NODE');
  console.log('COMPILED_TEXT_NODE');
  return st => {
    _updaters.forEach(u => u.update(st));
  };
};
export default mount;"
`;
